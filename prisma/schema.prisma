generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String         @default("user")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  notifications Notification[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserStory {
  id                 String         @id @default(cuid())
  title              String
  description        String
  acceptanceCriteria String?
  storyPoints        Int?
  jiraId             String?        @unique
  jiraKey            String?
  priority           String?
  status             String?
  qualityScore       Float?
  riskLevel          String?
  component          String?
  assignee           String?
  reporter           String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  qualityScores      QualityScore[]
  testCases          TestCase[]
  requirementAnalyses RequirementAnalysis[]

  @@index([jiraId])
  @@index([status])
  @@index([priority])
}

model Defect {
  id               String                @id @default(cuid())
  title            String
  description      String
  stepsToReproduce String?
  rootCause        String?
  resolution       String?
  severity         String?
  priority         String?
  component        String?
  status           String?
  jiraId           String?               @unique
  jiraKey          String?
  assignee         String?
  reporter         String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  resolvedAt       DateTime?
  defectClusters   DefectClusterDefect[]

  @@index([jiraId])
  @@index([severity])
  @@index([component])
  @@index([status])
}

model Document {
  id            String            @id @default(cuid())
  title         String
  content       String
  type          String
  version       String            @default("1.0")
  changelog     String?
  metadata      String?
  fileName      String?
  fileSize      Int?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  sections      DocumentSection[]

  @@index([type])
  @@index([version])
}

model DocumentSection {
  id           String   @id @default(cuid())
  documentId   String
  title        String
  content      String
  order        Int
  lastUpdated  DateTime @default(now())
  changeType   String?
  previousHash String?
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([order])
}

model TestCase {
  id                String         @id @default(cuid())
  title             String
  steps             String
  expectedResults   String
  sourceStoryId     String?
  generatedFrom     String?
  affectedByChanges Boolean        @default(false)
  priority          String?
  status            String?
  lastExecuted      DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  sourceStory       UserStory?     @relation(fields: [sourceStoryId], references: [id])

  @@index([sourceStoryId])
  @@index([generatedFrom])
}

model Embedding {
  id         String   @id @default(cuid())
  content    String
  vector     String
  sourceId   String
  sourceType String
  version    String   @default("1.0")
  createdAt  DateTime @default(now())

  @@index([sourceType, sourceId])
  @@index([sourceType])
}

model ImportJob {
  id             String    @id @default(cuid())
  type           String
  status         String
  totalItems     Int       @default(0)
  processedItems Int       @default(0)
  errors         String?
  metadata       String?
  startedAt      DateTime  @default(now())
  completedAt    DateTime?
  createdBy      String?

  @@index([type])
  @@index([status])
}

model DefectPattern {
  id             String          @id @default(cuid())
  name           String
  description    String
  frequency      Int             @default(0)
  severity       String
  component      String?
  rootCause      String?
  pattern        String
  defectClusters DefectCluster[]

  @@index([component])
  @@index([severity])
}

model QualityScore {
  id          String    @id @default(cuid())
  userStoryId String
  score       Float
  riskFactors String
  suggestions String
  generatedAt DateTime  @default(now())
  userStory   UserStory @relation(fields: [userStoryId], references: [id], onDelete: Cascade)

  @@index([userStoryId])
  @@index([score])
}

model RequirementAnalysis {
  id                String   @id @default(cuid())
  batchId           String   // Groups multiple analyses together
  userStoryId       String
  qualityScore      Float
  riskLevel         String   // Low, Medium, High, Critical
  strengths         String   // JSON array of strengths
  improvements      String   // JSON array of improvement suggestions
  riskFactors       String   // JSON array of risk factors
  aiAnalysis        String   // Full AI analysis text
  analysisVersion   String   @default("1.0")
  createdAt         DateTime @default(now())
  userStory         UserStory @relation(fields: [userStoryId], references: [id], onDelete: Cascade)

  @@index([batchId])
  @@index([userStoryId])
  @@index([qualityScore])
  @@index([riskLevel])
  @@index([createdAt])
}

model AnalysisBatch {
  id              String   @id @default(cuid())
  name            String
  description     String?
  totalStories    Int      @default(0)
  analyzedStories Int      @default(0)
  averageScore    Float?
  status          String   @default("pending") // pending, running, completed, failed
  filters         String?  // JSON of applied filters
  startedAt       DateTime @default(now())
  completedAt     DateTime?
  createdBy       String?

  @@index([status])
  @@index([startedAt])
}

model DefectCluster {
  id              String                @id @default(cuid())
  name            String
  pattern         String
  riskLevel       String
  createdAt       DateTime              @default(now())
  defectPatternId String?
  defectPattern   DefectPattern?        @relation(fields: [defectPatternId], references: [id])
  defects         DefectClusterDefect[]

  @@index([riskLevel])
}

model DefectClusterDefect {
  id              String        @id @default(cuid())
  defectClusterId String
  defectId        String
  defect          Defect        @relation(fields: [defectId], references: [id], onDelete: Cascade)
  defectCluster   DefectCluster @relation(fields: [defectClusterId], references: [id], onDelete: Cascade)

  @@unique([defectClusterId, defectId])
}

model ChangeImpact {
  id             String   @id @default(cuid())
  changeId       String
  changeType     String
  affectedType   String // 'user_story', 'defect', 'document', 'test_case'
  affectedId     String
  impactLevel    String
  requiresAction Boolean  @default(false)
  description    String?
  createdAt      DateTime @default(now())

  @@index([changeType, changeId])
  @@index([affectedType, affectedId])
  @@index([impactLevel])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  relatedId String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([type])
}

model JiraProjectConfig {
  id            String   @id @default(cuid())
  projectKey    String   @unique
  projectName   String
  baseUrl       String
  configuration String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([projectKey])
}

model AIAuditLog {
  id              String   @id @default(cuid())
  promptType      String   // 'test-case-generation', 'requirements-analysis', etc.
  promptName      String   // Human readable name
  endpoint        String   // API endpoint used
  model           String   // Claude model used
  inputTokens     Int      // Tokens in the request
  outputTokens    Int      // Tokens in the response
  totalTokens     Int      // Total tokens used
  costUSD         Float    // Cost in USD
  costGBP         Float    // Cost in GBP (calculated)
  userId          String?  // User who triggered the request
  userEmail       String?  // User email for reference
  requestData     String?  // JSON of request parameters (optional)
  responseData    String?  // JSON of response data (optional)
  duration        Int?     // Request duration in milliseconds
  success         Boolean  @default(true)
  errorMessage    String?  // Error message if failed
  createdAt       DateTime @default(now())

  @@index([promptType])
  @@index([userId])
  @@index([createdAt])
  @@index([success])
  @@index([model])
}

model AISettings {
  id                    String   @id @default(cuid())
  inputTokenCostUSD     Float    @default(0.000003)  // Cost per input token in USD ($3 per 1M tokens)
  outputTokenCostUSD    Float    @default(0.000015)  // Cost per output token in USD ($15 per 1M tokens)
  exchangeRateUSDToGBP  Float    @default(0.74)   // USD to GBP exchange rate
  model                 String   @default("Claude Sonnet 4")
  trackingEnabled       Boolean  @default(true)
  retentionDays         Int      @default(90)     // How long to keep audit logs
  updatedAt             DateTime @updatedAt
  updatedBy             String?  // User who last updated settings

  @@index([updatedAt])
}
